<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 当前工程依赖的父工程-->
    <parent>
        <artifactId>Sardine</artifactId>
        <groupId>com.gro</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <!-- 当前pom.xml 所采用的标签结构 从Maven2开始固定为4.0.0-->
    <modelVersion>4.0.0</modelVersion>

    <!--当前工程信息 三个向量确定唯一jar包-->
    <!-- 当前工程如果打成jar包,则在仓库中的位置为 配置的仓库目录/com/gro/ABCDE/ABCDE-1.0-SNAPSHOT.jar-->
    <!--groupId  : 一般为公司或组织ID-->
    <groupId>com.gro</groupId>
    <!--artifactId : 为项目/模块名称 -->
    <artifactId>ABCDE</artifactId>
    <!--version : 版本 可自定义-->
    <version>1.0-SNAPSHOT</version>

    <!--
     打包方式:
     jar(默认) : 生成jar包,说明是java工程
     war : 生成war包,说明是web工程
     pom : 说明这个工程是用来管理其他工程的工程
    -->
    <packaging>jar</packaging>

    <!--定义属性,在下文中可以使用${属性名} 引用-->
    <properties>
        <!-- 工程构建过程中读取源码时使用的字符集 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--定义版本-->
        <hadoop.version>2.7.5</hadoop.version>
        <spark.version>2.4.0</spark.version>
    </properties>

    <!--dependencyManagement: 管理依赖
      在 dependencyManagement 中声明的依赖 不会在子工程中自动继承,如果子工程需要使用这里的依赖,还需要手动添加dependency 标签,但是可以不写版本号
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.47</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <!-- 配置依赖 dependencies 中可以配置多个 dependency
         子工程会自动继承父工程 dependencies 标签中的依赖
     -->
    <dependencies>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_2.11</artifactId>
            <!-- 引用properties标签中定义的属性-->
            <version>${spark.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_2.11</artifactId>
            <version>${spark.version}</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <!--scope : 标签配置依赖的范围
            compile(默认): 编译、测试、运行(部署)都有效
            test : 仅测试有效,只在编译测试代码或者运行测试代码的时候才能使用该依赖, 不会随项目一起打包
            provided : 编译、测试有效 , 在编译和测试时需要,运行时不会被打包
            runtime  : 测试、运行有效, 无需编译时可以使用,比如jdbc的驱动包
            system   : 测试、运行有效,system范围依赖与provided类似,但必须显式的提供一个位于本地系统中JAR文件的路径,需要指定systemPath磁盘路径,system依赖不推荐使用。
                       使用system 时还需要指定 <systemPath>本地jar包路径</systemPath>
            -->
            <scope>test</scope>
            <!--exclusions : 排除依赖,当jar包冲突时需要排除依赖 -->
            <exclusions>
                <!--需要排除的jar包,不需要写版本-->
                <exclusion>
                    <groupId>**</groupId>
                    <artifactId>**</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>


</project>